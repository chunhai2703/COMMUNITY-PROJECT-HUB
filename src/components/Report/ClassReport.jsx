import React, { useState } from 'react'
import classes from './ClassReport.module.css'
import classNames from 'classnames/bind'
import { useNavigate } from 'react-router-dom'
import useAuth from '../../hooks/useAuth'
import { Controller, useForm } from 'react-hook-form'
import { TextField } from '@mui/material'
import { Button, Upload } from 'antd'
import { UploadOutlined } from '@ant-design/icons'

const cx = classNames.bind(classes)

export const ClassReport = () => {
  const { control, handleSubmit, setValue, formState: { isDirty } } = useForm();
  const [isEditing, setIsEditing] = useState(false);
  const navigate = useNavigate();
  const { user } = useAuth();

  const handleEditToggle = () => {
    setIsEditing(!isEditing);
  };

  return (
    <div className={cx('report-container')}>
      <div className={cx('report-header')}>
        <h2 className={cx('report-logo')}>C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM</h2>
        <p className={cx('report-slogan')}>ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c</p>
        <p style={{ fontWeight: 'bold' }}>---------------------------</p>
      </div>
      <div className={cx('report-title')}>
        <h3 className={cx('report-title-text')}>B√ÅO C√ÅO C√îNG VI·ªÜC</h3>
        <p className={cx('report-title-subtext')}>(D·ª± √°n: "üìö H√†nh tr√¨nh tri th·ª©c")</p>
      </div>

      <div className={cx('report-content')}>
        <form className={cx('report-form')}>
          {[
            { label: "K√≠nh g·ª≠i:", value: <p>Qu·∫£n l√Ω d·ª± √°n <span style={{ fontStyle: 'italic' }}>Tr·∫ßn Minh C√¥ng</span></p> },
            { label: "T√¥i t√™n:", value: `Nguy·ªÖn D·∫° Minh Ch√¢u` },
            { label: "M√£ gi·∫£ng vi√™n:", value: `LT345678` },
            { label: "L·ªõp:", value: `C789` },
            { label: "Vai tr√≤:", value: `Gi·∫£ng vi√™n` },
            {
              label: "N·ªôi dung b√°o c√°o:",
              value: isEditing ? (
                <Controller
                  name="reportContent"
                  control={control}
                  defaultValue={' "B·∫øp ƒÇn Y√™u Th∆∞∆°ng" l√† m·ªôt d·ª± √°n c·ªông ƒë·ªìng nh·∫±m cung c·∫•p nh·ªØng b·ªØa ƒÉn mi·ªÖn ph√≠ cho ng∆∞·ªùi v√¥ gia c∆∞, lao ƒë·ªông ngh√®o, tr·∫ª em c∆° nh·ª° v√† b·ªánh nh√¢n kh√≥ khƒÉn t·∫°i c√°c b·ªánh vi·ªán. D·ª± √°n kh√¥ng ch·ªâ gi√∫p ƒë·ª° v·ªÅ v·∫≠t ch·∫•t m√† c√≤n lan t·ªèa tinh th·∫ßn nh√¢n √°i v√† s·∫ª chia trong x√£ h·ªôi.'}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      className={cx('textarea')}
                      fullWidth
                      rows={6}
                      multiline
                      required
                    />
                  )}
                />
              ) : (
                <div className={cx('textareaNotEditing')}>
                  "B·∫øp ƒÇn Y√™u Th∆∞∆°ng" l√† m·ªôt d·ª± √°n c·ªông ƒë·ªìng nh·∫±m cung c·∫•p nh·ªØng b·ªØa ƒÉn mi·ªÖn ph√≠ cho ng∆∞·ªùi v√¥ gia c∆∞, lao ƒë·ªông ngh√®o, tr·∫ª em c∆° nh·ª° v√† b·ªánh nh√¢n kh√≥ khƒÉn t·∫°i c√°c b·ªánh vi·ªán. D·ª± √°n kh√¥ng ch·ªâ gi√∫p ƒë·ª° v·ªÅ v·∫≠t ch·∫•t m√† c√≤n lan t·ªèa tinh th·∫ßn nh√¢n √°i v√† s·∫ª chia trong x√£ h·ªôi.
                </div>
              ),
            },
            {
              label: "B·∫£ng ƒëi·ªÉm:",
              value: isEditing ? (
                <Controller
                  name="score"
                  control={control}
                  defaultValue={[]}
                  rules={{
                    required: 'Vui l√≤ng ch·ªçn file ƒë·ªÉ import',
                  }}
                  render={({ field }) => (
                    <div>
                      <Upload
                        name="file"
                        accept=".xls,.xlsx"
                        action="https://660d2bd96ddfa2943b33731c.mockapi.io/api/upload"
                        headers={{ authorization: 'authorization-text' }}
                        fileList={field.value}
                        onChange={(info) => {
                          field.onChange(info.fileList);
                        }}
                        beforeUpload={() => false}
                      >
                        <Button icon={<UploadOutlined />} type='primary'>Nh·∫•n v√†o ƒë·ªÉ upload</Button>
                      </Upload>
                      {/* {errors.trainees && <p style={{ color: "red" }}>{errors.trainees.message}</p>} */}
                    </div>
                  )}
                />
              ) : (
                <p className={cx('scoreTableNotEditing')}>
                  Nh·∫•n v√†o ƒë·ªÉ xem
                </p>
              ),
            },


          ].map((item, index) => (
            <div key={index} className={cx('infoRow')}>
              <p className={cx('label')}>{item.label}</p>
              <span className={cx('info')}>
                {item.value}
              </span>
            </div>
          ))}

        </form>
        <div className={cx('signature-container')}>
          <p className={cx('signature-date')}>Ng√†y 09 th√°ng 03 nƒÉm 2025</p>
          <p className={cx('signature-title')}>K√Ω t√™n</p>
          <p className={cx('signature-name')}>Nguy·ªÖn D·∫° Minh Ch√¢u</p>
        </div>
      </div>
      <div className={cx('report-buttons')}>
        {isEditing && (
          <Button
            type="button"
            variant="contained"
            className={cx('saveButton')}
          // onClick={handleSubmit(onSubmit)}
          >
            L∆∞u
          </Button>
        )}

        <Button
          type="button"
          variant="contained"
          className={`${isEditing ? cx('editProfileButtonEditing') : cx('editProfileButtonNotEditing')}`}
          onClick={handleEditToggle}
        >
          {isEditing ? "H·ªßy ch·ªânh s·ª≠a" : "Ch·ªânh s·ª≠a h·ªì s∆°"}
        </Button>
      </div>
    </div>
  )
}
