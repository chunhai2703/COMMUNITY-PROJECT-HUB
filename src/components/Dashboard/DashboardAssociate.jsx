import { useEffect, useState } from "react";
import useAuth from "../../hooks/useAuth";
import { Spinner } from "../Spinner/Spinner";
import { Card, CardContent, Grid, Typography } from "@mui/material";
import { Doughnut } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import {
  GetAmountOfProject,
  GetAmountOfTrainee,
  GetAmountProjectWithStatus,
  GetProgressOfAllProject
} from "../../services/DashboardApi";
import { Banner } from "../Banner/Banner";
import classes from "./DashboardAssociate.module.css";
import classNames from "classnames/bind";
import dayjs from 'dayjs'; // üü¢ Import dayjs ƒë·ªÉ x·ª≠ l√Ω ng√†y gi·ªù
import 'dayjs/locale/vi'; // üü¢ D√πng ti·∫øng Vi·ªát cho ƒë·ªãnh d·∫°ng ng√†y
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import 'animate.css';
import { DownOutlined, QuestionCircleOutlined } from "@ant-design/icons";
import { Collapse } from "antd";
import { Line } from "rc-progress";


const cx = classNames.bind(classes);

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.locale('vi'); // ƒê·∫∑t ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh l√† ti·∫øng Vi·ªát

const items = [
  {
    key: '1',
    label: (
      <span style={{ color: 'white', fontWeight: '600', fontSize: '18px' }}>
        Vai tr√≤ c·ªßa gi·∫£ng vi√™n trong d·ª± √°n l√† g√¨?
      </span>
    ),
    style: { backgroundColor: '#474D57' },
    children: (
      <ul style={{ listStyleType: 'disc', paddingLeft: '1rem', fontSize: '16px' }}>
        <li><span style={{ fontWeight: 600 }}>H∆∞·ªõng d·∫´n</span> v√† <span style={{ fontWeight: 600 }}>ƒë·ªãnh h∆∞·ªõng chuy√™n m√¥n</span> cho sinh vi√™n trong d·ª± √°n.</li>
        <li>ƒê√≥ng g√≥p √Ω ki·∫øn ƒë·ªÉ <span style={{ fontWeight: 600 }}>c·∫£i thi·ªán quy tr√¨nh</span> v√† <span style={{ fontWeight: 600 }}>ch·∫•t l∆∞·ª£ng</span> c·ªßa d·ª± √°n.</li>
        <li><span style={{ fontWeight: 600 }}>K·∫øt n·ªëi</span> d·ª± √°n v·ªõi c√°c <span style={{ fontWeight: 600 }}>t·ªï ch·ª©c</span>, <span style={{ fontWeight: 600 }}>doanh nghi·ªáp</span> ho·∫∑c <span style={{ fontWeight: 600 }}>c√°c ngu·ªìn t√†i tr·ª£</span> ph√π h·ª£p.</li>
      </ul>
    ),
  },
  {
    key: '2',
    label: (
      <span style={{ color: 'white', fontWeight: '600', fontSize: '18px' }}>
        Gi·∫£ng vi√™n c√≥ th·ªÉ h·ªó tr·ª£ h·ªçc vi√™n nh∆∞ th·∫ø n√†o?
      </span>
    ),
    style: { backgroundColor: '#474D57' },
    children: (
      <ul style={{ listStyleType: 'disc', paddingLeft: '1rem', fontSize: '16px' }}>
        <li><span style={{ fontWeight: 600 }}>H∆∞·ªõng d·∫´n</span> h·ªçc vi√™n v·ªÅ <span style={{ fontWeight: 600 }}>chuy√™n m√¥n</span>, <span style={{ fontWeight: 600 }}>k·ªπ thu·∫≠t</span>, v√† c√°c <span style={{ fontWeight: 600 }}>k·ªπ nƒÉng c·∫ßn thi·∫øt</span>.</li>
        <li><span style={{ fontWeight: 600 }}>ƒê·ªãnh h∆∞·ªõng chi·∫øn l∆∞·ª£c</span> ƒë·ªÉ gi√∫p d·ª± √°n ph√°t tri·ªÉn b·ªÅn v·ªØng.</li>
        <li><span style={{ fontWeight: 600 }}>H·ªó tr·ª£ h·ªçc vi√™n</span> trong vi·ªác <span style={{ fontWeight: 600 }}>tr√¨nh b√†y</span> v√† <span style={{ fontWeight: 600 }}>b√°o c√°o k·∫øt qu·∫£</span> d·ª± √°n.</li>
        <li><span style={{ fontWeight: 600 }}>ƒê√°nh gi√°</span> v√† <span style={{ fontWeight: 600 }}>ph·∫£n h·ªìi</span> ƒë·ªÉ gi√∫p h·ªçc vi√™n <span style={{ fontWeight: 600 }}>c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng</span> c√¥ng vi·ªác.</li>
      </ul>
    ),
  },
  {
    key: '3',
    label: (
      <span style={{ color: 'white', fontWeight: '600', fontSize: '18px' }}>
        N·∫øu gi·∫£ng vi√™n kh√¥ng c√≥ nhi·ªÅu th·ªùi gian, c√≥ th·ªÉ tham gia b·∫±ng c√°ch n√†o?
      </span>
    ),
    style: { backgroundColor: '#474D57' },
    children: (
      <ul style={{ listStyleType: 'disc', paddingLeft: '1rem', fontSize: '16px' }}>
        <li><span style={{ fontWeight: 600 }}>H·ªó tr·ª£ t·ª´ xa</span> b·∫±ng c√°ch <span style={{ fontWeight: 600 }}>t∆∞ v·∫•n chuy√™n m√¥n</span> qua <span style={{ fontWeight: 600 }}>email</span> ho·∫∑c <span style={{ fontWeight: 600 }}>cu·ªôc h·ªçp tr·ª±c tuy·∫øn</span>.</li>
        <li>Tham gia trong c√°c giai ƒëo·∫°n quan tr·ªçng nh∆∞ <span style={{ fontWeight: 600 }}>ƒë√°nh gi√° k·∫ø ho·∫°ch</span>, <span style={{ fontWeight: 600 }}>ki·ªÉm tra ti·∫øn ƒë·ªô</span>.</li>
        <li><span style={{ fontWeight: 600 }}>Gi·ªõi thi·ªáu h·ªçc vi√™n</span> ƒë·∫øn c√°c <span style={{ fontWeight: 600 }}>chuy√™n gia</span> ho·∫∑c <span style={{ fontWeight: 600 }}>ngu·ªìn l·ª±c h·ªØu √≠ch</span> cho d·ª± √°n.</li>
      </ul>
    ),
  },
  {
    key: '4',
    label: (
      <span style={{ color: 'white', fontWeight: '600', fontSize: '18px' }}>
        D·ª± √°n c√≥ mang l·∫°i l·ª£i √≠ch g√¨ cho gi·∫£ng vi√™n kh√¥ng?
      </span>
    ),
    style: { backgroundColor: '#474D57' },
    children: (
      <ul style={{ listStyleType: 'disc', paddingLeft: '1rem', fontSize: '16px' }}>
        <li><span style={{ fontWeight: 600 }}>M·ªü r·ªông c∆° h·ªôi h·ª£p t√°c</span> v·ªõi c√°c <span style={{ fontWeight: 600 }}>t·ªï ch·ª©c</span>, <span style={{ fontWeight: 600 }}>doanh nghi·ªáp</span> v√† <span style={{ fontWeight: 600 }}>c·ªông ƒë·ªìng</span>.</li>
        <li><span style={{ fontWeight: 600 }}>G√≥p ph·∫ßn n√¢ng cao ch·∫•t l∆∞·ª£ng gi·∫£ng d·∫°y</span> th√¥ng qua th·ª±c ti·ªÖn.</li>
        <li>ƒê∆∞·ª£c c√¥ng nh·∫≠n l√† <span style={{ fontWeight: 600 }}>ng∆∞·ªùi h∆∞·ªõng d·∫´n</span>, <span style={{ fontWeight: 600 }}>c·ªë v·∫•n</span> trong c√°c d·ª± √°n c√≥ t√°c ƒë·ªông x√£ h·ªôi.</li>
        <li><span style={{ fontWeight: 600 }}>C∆° h·ªôi tham gia</span> v√†o c√°c <span style={{ fontWeight: 600 }}>nghi√™n c·ª©u</span> ho·∫∑c <span style={{ fontWeight: 600 }}>xu·∫•t b·∫£n b√†i b√°o</span> li√™n quan ƒë·∫øn d·ª± √°n.</li>
      </ul>
    ),
  },
];


export const DashboardAssociate = () => {
  const [currentTime, setCurrentTime] = useState(dayjs().tz('Asia/Ho_Chi_Minh'));
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [amountTrainee, setAmountTrainee] = useState(0);
  const [amountProject, setAmountProject] = useState(0);
  const [amountProjectWithStatus, setAmountProjectWithStatus] = useState([]);
  const [progressProjectList, setProgressProjectList] = useState([]);
  
  useEffect(() => {
    // üïí C·∫≠p nh·∫≠t th·ªùi gian m·ªói gi√¢y
    const interval = setInterval(() => {
      setCurrentTime(dayjs().tz('Asia/Ho_Chi_Minh'));
    }, 1000);

    return () => clearInterval(interval); // üõë D·ªçn d·∫πp interval khi component unmount
  }, []);

  const onChange = (key) => {
    console.log(key);
  };
  const customExpandIcon = ({ isActive }) => (
    <DownOutlined style={{ color: 'white', fonWWeight: '600', transform: isActive ? 'rotate(180deg)' : 'rotate(0deg)', transition: '0.3s' }} />
  );

  useEffect(() => {
    if (user) {
      setIsLoading(true);
      fetchAmountOfTrainee();
      fetchAmountOfProject();
      fetchAmountProjectWithStatus();
      fetchProgressProjectList();
      setIsLoading(false);
    }
  }, [user]);

  const fetchAmountOfTrainee = async () => {
    const response = await GetAmountOfTrainee(user.accountId);
    if (response.ok) {
      const responseData = await response.json();
      setAmountTrainee(responseData.result);
    } else {
      console.error("Error when getting amount of trainee");
    }
  };

  const fetchAmountOfProject = async () => {
    const response = await GetAmountOfProject(user.accountId);
    if (response.ok) {
      const responseData = await response.json();
      setAmountProject(responseData.result);
    } else {
      console.error("Error when getting amount of project");
    }
  };

  const fetchAmountProjectWithStatus = async () => {
    const response = await GetAmountProjectWithStatus(user.accountId);
    if (response.ok) {
      const responseData = await response.json();
      setAmountProjectWithStatus(responseData.result);
    } else {
      console.error("Error when getting amount of project with status");
    }
  };

  const fetchProgressProjectList = async () => {
          const response = await GetProgressOfAllProject(user.accountId);
          if (response.ok) {
              const responseData = await response.json();
              setProgressProjectList(responseData.result);
          } else {
              console.error("Error when getting progress of project");
          }
      };

  const chartData = {
    labels: amountProjectWithStatus.map(item => item.type),
    datasets: [{
      label: 'S·ªë l∆∞·ª£ng d·ª± √°n',
      data: amountProjectWithStatus.map(item => item.amount),
      backgroundColor: [
        '#9966FF',   // T√≠m - L√™n k·∫ø ho·∫°ch
        '#36A2EB',  // Xanh d∆∞∆°ng - S·∫Øp di·ªÖn ra
        '#FFCE56',  // V√†ng - ƒêang di·ªÖn ra
        '#4BC0C0',  // Xanh l·ª•c - K·∫øt th√∫c
        '#FF6384',  // ƒê·ªè - H·ªßy

      ],
      hoverOffset: 4
    }]
  };

  if (!user) return <Spinner />

  return (
    <div className={cx('dashboard-container')}>
      <div className={cx('greeting-container')}>
        <h2 className={cx('greeting', 'animate__animated animate__lightSpeedInRight')}>
          <span className={cx('greeting-text')}>Xin ch√†o, </span>
          <span className={cx('greeting-role')}>b√™n ƒë·ªëi t√°c </span>
          <span className={cx('greeting-name')}>{user?.fullName}</span> !
        </h2>

        {/* üìÖ Hi·ªÉn th·ªã ng√†y gi·ªù hi·ªán t·∫°i */}
        <p className={cx('current-time', 'animate__animated animate__fadeIn')}>H√¥m nay l√† {currentTime.format('dddd, DD/MM/YYYY HH:mm:ss')}</p>
      </div>
      <Banner />
      <Grid container spacing={3}>
        <Grid item xs={12} sm={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                T·ªïng s·ªë h·ªçc vi√™n
              </Typography>
              <Typography variant="h4">{amountTrainee}</Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                T·ªïng s·ªë d·ª± √°n
              </Typography>
              <Typography variant="h4">{amountProject}</Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Tr·∫°ng th√°i d·ª± √°n
              </Typography>
              <div style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%"
              }}>
                <Doughnut data={chartData} options={{ maintainAspectRatio: false }} width={500} height={400} />
              </div>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Ti·∫øn ƒë·ªô d·ª± √°n
              </Typography>
              <div className="mt-6">
                {progressProjectList && progressProjectList.map((project) => (
                  <div>
                    <p className="text-xl mb-3" >{project.projectName} - {project.percentage} %</p>
                    <Line percent={project.percentage} strokeWidth={1} strokeColor="#4CAF50" />
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      <div className={cx('collapse-container')}>
        <h2 className={cx('collapse-title')}>Nh·ªØng c√¢u h·ªèi th∆∞·ªùng g·∫∑p <QuestionCircleOutlined /></h2>
        <Collapse items={items} defaultActiveKey={['1']} onChange={onChange} size='large' expandIcon={customExpandIcon} />
      </div>

    </div>
  );
};
